// SSPなどから来るイベント

//----------------------------------------------------------------
// OnSecondChange
//----------------------------------------------------------------
string OnSecondChange(dict ref)
{
	int now = GetEpochSec();
	if ( now > (Fake_DataLimit_LastTime+60) ) {
		// Fake_DataLimit_Countのカウントをゼロに戻す
		Fake_DataLimit_Count = 0;
	}
	
	// 表示待ちを処理
  string script = CheckWaitingList();

  // 全てのメッセージ
	array msg = ListUpAllMessageArray();

	if ( _aryvn(msg)>0 ) {
		// 条件達成か確認
		msg = CheckMessageCondition("",msg);
	}

	if ( _aryvn(msg)>0 ) {
		// 条件を満たしたメッセージがある
		AddMessageWaitingList(msg);
	}

	if ( _strlen(script) > 0 ) {
		// 喋るべきスクリプトがある
		dictOptionalHeader["marker"] = version();
		dictOptionalHeader["script_option"] = "nobreak";
		return script;
	}
	
	return;
}

//----------------------------------------------------------------
// OnTrayBalloonClick
//----------------------------------------------------------------
string OnTrayBalloonClick(dict ref)
{
	string r0 = ref["Reference0"];
	string r1 = ref["Reference1"];

	// ログの新しい方から探す
	int result = -1;
	int cnt = _aryvn(notify_log)-1;
	for ( int i=0; i<_aryvn(notify_log); i++ ) {
		string sctipt = notify_log[cnt][0];
		string title = _regex_search( sctipt[0], "title=([^,\]]*)" )[1];
		array text_arr = _regex_search( sctipt[0], "text=([^,\]]*)" );
		text_arr[0] = nil;
		string text = _arystr(text_arr);
		if ( r0==title && r1==text ) {
			result = cnt;
			break;
		}
		cnt--;
	}

	// スクリプトを作る
	string output;
	// ブラウザを開く
	if (result==-1) {
		output = "\\C\\![open,browser,http://localhost:8000/]";
	} else {
		output = "\\C\\![open,browser,http://localhost:8000/person.html?sender=";
		output += _urlencode( notify_log[result][1], "utf8" );
		output += "&sender_id=";
		output += _urlencode( notify_log[result][2], "utf8" );
		output += "]";
	}
	// 結果を送信
	dictOptionalHeader["marker"] = version();
	dictOptionalHeader["script_option"] = "nobreak";
	return output;
}

//----------------------------------------------------------------
// OnMenuExec
// 一覧を開く
//----------------------------------------------------------------
string OnMenuExec(dict ref)
{
	// スクリプトを作る
	string script = "\\C\\![open,browser,http://localhost:8000/index.html]";

	// 結果を送信
	dictOptionalHeader["marker"] = version();
	dictOptionalHeader["script_option"] = "nobreak";
	return script;
}

//----------------------------------------------------------------
// ゴーストが起動した
//----------------------------------------------------------------
OnGhostBoot(dict ref)
{
	// 起動したゴースト名
	string ghostname = TranslateSystemChar(ref["Reference1"]);

	// Ghost_Bootedを満たしたメッセージ
	array msg = PickUpMessageByCondition("Ghost_Booted",{{ghostname}});

	if ( _aryvn(msg)>0 ) {
		// Ghost_Booted以外の条件を満たしているか調べる
		msg = CheckMessageCondition("Ghost_Booted",msg);
	}

	if ( _aryvn(msg)>0 ) {
		// 条件を満たしたメッセージがある
		AddMessageWaitingList(msg);
	}
}

//----------------------------------------------------------------
// ゴーストが終了した
//----------------------------------------------------------------
OnGhostExit(dict ref)
{
	// 終了したゴースト名
	string ghostname = TranslateSystemChar(ref["Reference1"]);

	// Ghost_Closedを満たしたメッセージ
	array msg = PickUpMessageByCondition("Ghost_Closed",{{ghostname}});

	if ( _aryvn(msg)>0 ) {
		// Ghost_Closed以外の条件を満たしているか調べる
		msg = CheckMessageCondition("Ghost_Closed",msg);
	}

	if ( _aryvn(msg)>0 ) {
		// 条件を満たしたメッセージがある
		AddMessageWaitingList(msg);
	}
}

//----------------------------------------------------------------
// インストール済みゴースト名のリストを保存する
//----------------------------------------------------------------
// スコープを一番外側に
array InstalledGhostNameList;

installedghostname(dict ref)
{
	// 変数を空にする
	InstalledGhostNameList = {};

	for ( int i=0; i<_dicvn(ref); i++ ) {
		if ( _gettype(ref["Reference"+i]) == "nil" ) {
			// 終了したら脱出
			return;
		}
		else {
			// 存在したら配列に追加
			InstalledGhostNameList += ref["Reference"+i];
		}
	}
}
