// SSPなどから来るイベント

//----------------------------------------------------------------
// OnSecondChange
//----------------------------------------------------------------
string OnSecondChange(dict ref)
{
	int now = GetEpochSec();
	if ( now > (Fake_DataLimit_LastTime+60) ) {
		// Fake_DataLimit_Countのカウントをゼロに戻す
		Fake_DataLimit_Count = 0;
		Fake_DataLimit_LastTime = GetEpochSec();
	}

	// 表示待ちを処理
  string script = CheckWaitingList();

  // 全てのメッセージ
	array msg = ListUpAllMessageArray();

	if ( _aryvn(msg)>0 ) {
		// 条件達成か確認
		msg = CheckMessageCondition("",msg);
	}

	if ( _aryvn(msg)>0 ) {
		// 条件を満たしたメッセージがある
		AddMessageWaitingList(msg);
	}

	if ( _strlen(script) > 0 ) {
		// 喋るべきスクリプトがある
		SaveVar();
  	dictOptionalHeader["event"] = "OnUkagakaGhostMessenger_RaiseNotification";
		dictOptionalHeader["marker"] = version();
		dictOptionalHeader["script_option"] = "nobreak";
		return script;
	}
	
	return;
}

//----------------------------------------------------------------
// OnTrayBalloonClick
//----------------------------------------------------------------
string OnTrayBalloonClick(dict ref)
{
	string r0 = ref["Reference0"];
	string r1 = ref["Reference1"];

	// ログの新しい方から探す
	int result = -1;
	int cnt = _aryvn(notify_log)-1;
	for ( int i=0; i<_aryvn(notify_log); i++ ) {
		string sctipt = notify_log[cnt][0];
		string title = _regex_search( sctipt[0], "title=([^,\]]*)" )[1];

		// 複数行の文字列にも対応したい
		string text = "";
		int while_cnt = 0;
		while ( while_cnt<10 ) {
			string tmp_text = _regex_search( sctipt[0], "text=([^,\]]*)", while_cnt )[1];
			if ( _strlen(tmp_text)<=0 ) {
				break;
			} else if ( _strlen(text)>0 ) {
				text += "  ";
			}
			text += tmp_text;
			while_cnt++;
		}

		if ( r0==title && _strstr( r1, text, 0 )==0 ) {
			result = cnt;
			break;
		}
		cnt--;
	}

	// スクリプトを作る
	string output;
	// ブラウザを開く
	if (result==-1) {
		output = "\\C\\![open,browser,http://localhost:";
		output += localhost_number;
		output += "/]";
	} else {
		output = "\\C\\![open,browser,http://localhost:";
		output += localhost_number;
		output += "/person.html?sender=";
		output += _urlencode( notify_log[result][1], "utf8" );
		output += "&sender_id=";
		output += _urlencode( notify_log[result][2], "utf8" );
		output += "]";
	}
	// 結果を送信
  dictOptionalHeader["event"] = "OnUkagakaGhostMessenger_TrayBalloonClick";
	dictOptionalHeader["marker"] = version();
	dictOptionalHeader["script_option"] = "nobreak";
	return output;
}

//----------------------------------------------------------------
// OnMenuExec
// 一覧を開く
//----------------------------------------------------------------
string OnMenuExec(dict ref)
{
	// スクリプトを作る
	string script = "";
	script += "\\C\\![open,browser,http://localhost:";
	script += localhost_number;
	script += "/]";

	// 結果を送信
	dictOptionalHeader["marker"] = version();
	dictOptionalHeader["script_option"] = "nobreak";
	return script;
}

//----------------------------------------------------------------
// ゴーストが起動した
//----------------------------------------------------------------
OnGhostBoot(dict ref)
{
	// 起動したゴースト名
	string ghostname = TranslateSystemChar(ref["Reference1"]);

	// Ghost_Bootedを満たしたメッセージ
	array msg = PickUpMessageByCondition("Ghost_Booted",{{ghostname}});

	if ( _aryvn(msg)>0 ) {
		// Ghost_Booted以外の条件を満たしているか調べる
		msg = CheckMessageCondition("Ghost_Booted",msg);
	}

	if ( _aryvn(msg)>0 ) {
		// 条件を満たしたメッセージがある
		AddMessageWaitingList(msg);
	}
}

//----------------------------------------------------------------
// ゴーストが終了した
//----------------------------------------------------------------
OnGhostExit(dict ref)
{
	// 終了したゴースト名
	string ghostname = TranslateSystemChar(ref["Reference1"]);

	// Ghost_Closedを満たしたメッセージ
	array msg = PickUpMessageByCondition("Ghost_Closed",{{ghostname}});

	if ( _aryvn(msg)>0 ) {
		// Ghost_Closed以外の条件を満たしているか調べる
		msg = CheckMessageCondition("Ghost_Closed",msg);
	}

	if ( _aryvn(msg)>0 ) {
		// 条件を満たしたメッセージがある
		AddMessageWaitingList(msg);
	}
}

//----------------------------------------------------------------
// インストール済みゴースト名のリストを保存する
//----------------------------------------------------------------
// スコープを一番外側に
array InstalledGhostNameList;

installedghostname(dict ref)
{
	dict d = ref;
	d["Charset"] = nil;
	d["ID"] = nil;
	d["Language"] = nil;
	d["head"] = nil;

	InstalledGhostNameList = _dicvget(d);
}
