//================================================================
// 内蔵ではない関数
//================================================================

//----------------------------------------------------------------
// プラグイン情報
// 引数：　なし
// 返値：　文字列
//----------------------------------------------------------------
string pluginname()
{
	return "UkagakaGhostMessenger";
}

string version()
{
	return "UGM/0.0.0";
}

//----------------------------------------------------------------
// セーブデータを分配
// 引数・返値：　なし
//----------------------------------------------------------------
// 予約中
dict SaveData_Reserved;
// 条件を満たして受信待機中
array SaveData_Waiting;
// 受信済み
dict SaveData_Received;
// おやすみモードのフラグ
int oyasumi_flag;
// 送信した通知の履歴
// セーブファイルに保存しない
array notify_log;
// 一定時間内に多量のメッセージが来たら一時停止する
// セーブファイルに保存しない
int Fake_DataLimit_Count;
int Fake_DataLimit_LastTime;
// ローカルホストのポート番号
// セーブファイルに保存しない
int localhost_number;
// セーブデータを読めるように出力するかどうか
// セーブファイルに保存しない
string akari_log;

SaveVar()
{
	dictSaveData = ${
		$("SaveData_Reserved",SaveData_Reserved),
		$("SaveData_Waiting",SaveData_Waiting),
		$("SaveData_Received",SaveData_Received),
		$("oyasumi_flag",oyasumi_flag)
	};

	_vsave("savedata", dictSaveData);

	// web用jsonを出力する
	UpdateWebJson();

	// セーブデータを読めるようにする
	if ( _strlen(akari_log)>0 ) {
		_writetext( akari_log, _azv2json( dictSaveData ), "utf8", "crlf" );
	}
}

RestoreVar()
{
	dictSaveData = _vload("savedata");
	SaveData_Reserved = dictSaveData["SaveData_Reserved"];
	SaveData_Waiting = dictSaveData["SaveData_Waiting"];
	SaveData_Received = dictSaveData["SaveData_Received"];
	oyasumi_flag = dictSaveData["oyasumi_flag"];

	// おやすみモードが一時停止なら解除する
	if ( oyasumi_flag == 1 ) {
		oyasumi_flag = 0;
	}

	// web用jsonを出力する
	UpdateWebJson();

	// セーブデータを読めるようにする
	if ( _strlen(akari_log)>0 ) {
		_writetext( akari_log, _azv2json( dictSaveData ), "utf8", "crlf" );
	}
}

readConfig()
{
	if ( _isfile( "ugm_config.txt" )==0 ) {
		_writetext( "ugm_config.txt", {"//localhostのポート番号を指定","localhost_number,8000","","//指定されたファイル名でugm_server.exeのログを出力","//server_log,server_log.txt","","//灯のセーブデータを読める形で出力","//akari_log,akari_log.txt",""}, "utf8", "crlf" );
	}
	// config.txtを読む
	array config_txt = {};
	config_txt = _readtext( "ugm_config.txt", "utf8", "crlf" );

	localhost_number = 8000;
	for ( int i=0; i<_aryvn(config_txt); i++ ) {
		if ( _regex_match( config_txt[i], "localhost_number,\s*\d+\s*" )==1 ) {
			localhost_number = _regex_search( config_txt[i], "localhost_number,\s*(\d+)\s*" )[1];
		} else if ( _regex_match( config_txt[i], "akari_log,\s*\S+\s*" )==1 ) {
			akari_log = _regex_search( config_txt[i], "akari_log,\s*(\S+)\s*" )[1];
		}
	}
	// 範囲外だったら8000に直す
	if ( localhost_number<1024 || localhost_number>65535 || localhost_number==9801 || localhost_number==9821 ) {
		localhost_number = 8000;
	}
}

//----------------------------------------------------------------
// web用jsonを出力する
//----------------------------------------------------------------
UpdateWebJson()
{
	array testlog = {};
	array webjson = {};
	dict jsontmp = $();

	array ghosts = _dickeyget(SaveData_Received);
	int unread_count_all = 0;
	for ( int i0=0; i0<_aryvn(ghosts); i0++ ) {
		string ghost = ghosts[i0];
		array charas = _dickeyget(SaveData_Received[ghost]);
		for ( int i1=0; i1<_aryvn(charas); i1++ ) {
			string chara = charas[i1];
			// 送信者ごとの情報をまとめる
			dict account = $();
			account += $("sender",ghost);
			account += $("SenderId",chara);
			int block_flag = SaveData_Received[ghost][chara]["block_flag"];
			account += $("block_flag",block_flag);
			int mute_flag = SaveData_Received[ghost][chara]["mute_flag"];
			account += $("mute_flag",mute_flag);
			// アイコン
			if ( SaveData_Received[ghost][chara]["SenderIcon"] == "default" ) {
				// デフォルト
				account += $("SenderIcon","./res/image/icon_default.png");
			}
			else {
				// それ以外
				account += $("SenderIcon","./res/image/"+ghost+"/"+SaveData_Received[ghost][chara]["SenderIcon"]);
			}
			// 表示名
			account += $("SenderName",SaveData_Received[ghost][chara]["SenderName"]);
			// プロフ文
			account += $("SenderProfile",SaveData_Received[ghost][chara]["SenderProfile"]);
			// アカウント更新時間比較用の数値
			account += $("time_count",SaveData_Received[ghost][chara]["time_count"]);
			// 新着確認用の数値
			int unread_count = 0;
			// メッセージ識別子の配列
			array msg_ids = _dickeyget(SaveData_Received[ghost][chara]["msgs"]);
			// メッセージを日付ごとにわけ、時間順に並べ替える
			dict messages_to_sort = $();
			for ( int i2=0; i2<_aryvn(msg_ids); i2++ ) {
				string msg_id = msg_ids[i2];
				array msg_id_msgs = SaveData_Received[ghost][chara]["msgs"][msg_id];
				for ( int i3=0; i3<_aryvn( msg_id_msgs ); i3++ ) {
					array msg_txt = msg_id_msgs[i3]["Text"];
					string msg_day = msg_id_msgs[i3]["time_text"][0];
					string msg_minute = msg_id_msgs[i3]["time_text"][1];
					int msg_time_cnt = msg_id_msgs[i3]["time_count"];
					int msg_read_cnt = msg_id_msgs[i3]["read_time"];
					// 未読なら未読カウントを足す
					if (msg_time_cnt>msg_read_cnt&&block_flag!=1) {
						unread_count++;
						unread_count_all++;
					}
					// 変数が無なら空を入れておく
					if ( _gettype( messages_to_sort[msg_day] )=="nil" ) {
						messages_to_sort += $( msg_day, $() );
					}
					// 変数が無なら空を入れておく
					if ( _gettype( messages_to_sort[msg_day][msg_time_cnt] )=="nil" ) {
						messages_to_sort[msg_day] += $( msg_time_cnt, {} );
					}
					// 時間被り対策のため配列とする
					for ( int i4=0; i4<_aryvn(msg_txt); i4++ ) {
						dict d = $();
						if ( _strstr(msg_txt[i4],"class=\"stamp\"",0)!=-1 ) {
							// スタンプ
							if ( _aryvn( _regex_search( msg_txt[i4], "alt=\"(.+?)\"" ) ) > 0 ) {
								d += $( "alt", _regex_search( msg_txt[i4], "alt=\"(.+?)\"" )[1] );
							}
							d += $("type","stamp");
							d += $("time",msg_minute);
							d += $("src",_regex_search( msg_txt[i4], "src=\"(.+?)\"" )[1] );
						}
						else {
							// ふきだし
							d += $("type","bubble");
							d += $("time",msg_minute);
							d += $("text",msg_txt[i4]);
						}
						messages_to_sort[msg_day][msg_time_cnt] += d;
					}
				}
			}
			// 送信者ごとの未読数
			account += $("unread_count",unread_count);
			// メッセージを並べ替える
			array ar = {};
			for ( int i2=0; i2<_dicvn(messages_to_sort); i2++ ) {
				string day = _dickeyget(messages_to_sort)[i2];
				// 1次元目は日付なのでまず切り取り線を入れる
				ar += ${
					$("type","kiritori"),
					$("time",day)
				};
				for ( int i3=0; i3<_dicvn(messages_to_sort[day]); i3++ ) {
					string second = _dickeyget(messages_to_sort[day])[i3];
					for ( int i4=0; i4<_aryvn(messages_to_sort[day][second]); i4++ ) {
						ar += messages_to_sort[day][second][i4];
					}
				}
			}
			// 並べ替えたメッセージを配列に入れる
			account += $("msgs",ar);
			string sort_id = account["time_count"];
			sort_id += ghost + chara;
			jsontmp += $( sort_id, account );
		}
	}
	webjson += ${
		$("unread_count_all",unread_count_all),
		$("oyasumi_flag",oyasumi_flag)
	};
	for ( int i=0; i<_dicvn(jsontmp); i++ ) {
		webjson += jsontmp[_dickeyget(jsontmp)[i]];
	}
	_writetext("localweb\\html\\res\\data.json",_azv2json(webjson),"utf8");
	return;
}

//----------------------------------------------------------------
// EPOCH秒を取得する
// 引数：　年,月,日,時,分,秒をキー、値が整数の辞書型
// 返値：　EPOCH秒の整数
//----------------------------------------------------------------
int GetEpochSec(dict ref)
{
	// 結果用
	int result;

	// 現在の時間
	dict t = _gettime();

	if ( _dicvn(ref) <= 0 ) {
		// 現在の日時を使う
		result = _etime();
	}
	else {
		// 省略されていたら現在の値を入れる
		array arg;
		if (_gettype(ref["年"]) == "long") {arg += ref["年"];} else {arg += t["年"];}
		if (_gettype(ref["月"]) == "long") {arg += ref["月"];} else {arg += t["月"];}
		if (_gettype(ref["日"]) == "long") {arg += ref["日"];} else {arg += t["日"];}
		if (_gettype(ref["時"]) == "long") {arg += ref["時"];} else {arg += t["時"];}
		if (_gettype(ref["分"]) == "long") {arg += ref["分"];} else {arg += t["分"];}
		if (_gettype(ref["秒"]) == "long") {arg += ref["秒"];} else {arg += t["秒"];}

		result = _etime( arg[0], arg[1], arg[2], arg[3], arg[4], arg[5] );
	}

	// akariのetimeとEPOCHの差分
	result -= 2678400;

	return result;
}

//----------------------------------------------------------------
// EPOCH秒を日時へyayaで換算する
// 引数：　EPOCH（万国標準時で1970/1/1 00:00:00）からの経過秒数を整数で
// 返値：　年,月,日,時,分,秒,週,ミリ秒をキーとした辞書型（ミリ秒はゼロ固定　_gettime互換にするため入れている）
//----------------------------------------------------------------
dict GetTimeByEpochSec(int ref)
{
	dict result;
	if (ref==0) {ref=GetEpochSec();}
	dict req = _saorirequest( "yaya", "GETTIME", ref );

	int v0 = req["Value0"];
	int v1 = req["Value1"];
	int v2 = req["Value2"];
	int v4 = req["Value4"];
	int v5 = req["Value5"];
	int v6 = req["Value6"];
	
	string v3;
	if (req["Value3"]==0) {v3="日";}
	else if (req["Value3"]==1) {v3="月";}
	else if (req["Value3"]==2) {v3="火";}
	else if (req["Value3"]==3) {v3="水";}
	else if (req["Value3"]==4) {v3="木";}
	else if (req["Value3"]==5) {v3="金";}
	else if (req["Value3"]==6) {v3="土";}
	else {v3="？";}

	dict result = ${
		$("年",v0),
		$("月",v1),
		$("日",v2),
		$("週",v3),
		$("時",v4),
		$("分",v5),
		$("秒",v6),
		$("ミリ秒",0)
	};

	return result;
}

//----------------------------------------------------------------
// ゴースト名がインストール済み（＆読み込まれている）か確認する
// 引数：　ゴースト名の文字列の配列
// 　　　　例：{"Ｒポストと狛犬","Emily_Phase4.5",...}
// 返値：　認識されていたら1、そうでなければ0、の数値の配列　引数と順序は一緒
// 失敗したら-1の数値単独
//----------------------------------------------------------------
array IsGhostNameInstalled(array ref)
{
	// 結果用
	array result;

	if ( _aryvn(InstalledGhostNameList)==0 ) {
		// 未構築
		return -1;
	}
	
	for ( int i0=0; i0<_aryvn(ref); i0++ ) {
		int match=0;
		string ghostname = ref[i0];
		for ( int i1=0; i1<_aryvn(InstalledGhostNameList); i1++ ) {
			if ( TranslateSystemChar(InstalledGhostNameList[i1]) == TranslateSystemChar(ghostname) ) {
				match=1;
				break;
			}
		}
		result += match;
	}

	return result;
}

//----------------------------------------------------------------
// 使ってほしくない文字を半角アンダーバーへ変換する
// 引数：　変換前の文字列
// 返値：　変換後の文字列
//----------------------------------------------------------------
string TranslateSystemChar(string ref)
{
	string after = "_";
	string before = "[\\\/:\*\?\"\<\>\|\=]";
	string result = _regex_replace( ref, before, after );
	
	return result;
}

//----------------------------------------------------------------
// FMOを変数に入れなおす
// 引数・返値：　なし
//----------------------------------------------------------------
// スコープを一番外側にする
dict FmoTable;
array FmoCache;

RefreshFmo()
{
	// 現在のfmoを取得
	array raw_fmo = _getfmo();

	if ( _arystr(FmoCache) == _arystr(raw_fmo) ) {
		// 前回と変化が無かったので関数を終了
		return;
	}
	else {
		// 変化があるか確認する用のキャッシュを更新
		FmoCache = raw_fmo;
	}

	// 結果用の変数を空の辞書型に戻す
	FmoTable = $();

	// fmoの中身を切り出していく
	for ( int i=0; i < _aryvn( raw_fmo ); i++ ) {
		// バイト値1で分割
		array split = _strsplit( raw_fmo[i], _bytechar(1) );
		
		// 固定長32byteがid
		string id = _substr( split[0], 0, 32 );
		
		// 固定長32byte＋1ドットの次からがkey
		string key = _substr( split[0], 33, 20 );

		// 変数が無かったら空を入れておく
		if ( _gettype( FmoTable[id] ) == "nil" ) {
			FmoTable += $( id, $() );
		}

		// 値を格納
		FmoTable[id] += $( key, split[1] );
	}
	return;
}

//----------------------------------------------------------------
// 指定されたゴースト名の情報をFMOから取得する　ここには起動中のものしかいない
// 同じゴースト名・違うパスなどの組み合わせで複数体が同時起動されていた場合、
// 先に認識された方のみが検出される
// 引数：　GetFmoInfo( { ゴースト名, { FMOのキー名の文字列1, FMOのキー名の文字列2, } } );
// 返値：　指定されたキー名と対する値の入った辞書型
//----------------------------------------------------------------
dict GetFmoInfo(array argv)
{
	// 引数を格納
	string fullname = argv[0];
	array ref = argv[1];
	
	// 格納用の変数を定義
	dict result;

	// FMOの更新確認
	RefreshFmo();
	
	// 探す
	array ids = _dickeyget( FmoTable );
	for ( int i0=0; i0<_aryvn(ids); i0++ ) {
		string curt_id = ids[i0];
		if ( TranslateSystemChar(FmoTable[curt_id]["fullname"]) == TranslateSystemChar(fullname) ) {
			// 起動中ゴーストの情報が合致した
			for ( int i1=0; i1<_aryvn(ref); i1++ ) {
				// 指定されたキーの情報を格納
				string curt_key = ref[i1];
				result += $( curt_key, FmoTable[curt_id][curt_key] );
			}
			// 格納が終わったらループを脱出する
			break;
		}
	}

	if ( _dicvn(result) > 0 ) {
		// 情報を返す
		return result;
	}
	else {
		// 起動中にはいなかったので無を返す
		return;
	}
}

//----------------------------------------------------------------
// ゴーストから画像をコピーする
// 指定されたディレクトリが無ければ作る
// 引数：　CopyImage( コピー元のパスの文字列※絶対パス推奨, ゴースト名の文字列 );
// 返値：　成功時はファイル名の文字列　失敗時は無
//----------------------------------------------------------------
string CopyImage( string original, string sender )
{
	// 画像保存用ディレクトリ　末尾の\\を入れない
	string dir = "localweb\\html\\res\\image";

	if ( _isfile( dir ) == 0 ) {
		// 画像保存用ディレクトリが無い
		return;
	}
	
	// 元ファイルのサイズを調べる
	int fsize = _saorirequest( "yaya", "FSIZE", original )["Result"];

	if ( fsize >= 5000000 ) {
		// 元ファイルが適切なサイズではない
		return;
	}
	else if ( fsize <= 0 ) {
		// 元ファイルが見つからないor虚無
		return;
	}
	
	// 元ファイルが適切なサイズであるので続行

	// ファイル名を切り出す
	array split = _strsplit( original, "\\" );
	string filename = split[_aryvn(split)-1];

	// プラグイン側の相対パスを作る
	string copy_dir = dir + "\\" + sender;

	if ( _isfile( copy_dir ) == 0 ) {
		// コピー先ディレクトリが無いので作る
		int result = _dcreate( copy_dir );
		if ( result != 1 ) {
			// ディレクトリを作れなかった
			return;
		} 
	}
	
	// コピー先の相対パス
	string img_path = copy_dir + "\\" + filename;

	if ( _isfile( img_path ) == 1 ) {
		// 既にあるので消しちゃう
		int result = _fdelete( img_path );
	}

	// コピーする
	int result = _fcopy( original, img_path );

	if ( result == 1 ) {
		// コピー成功 ファイル名を返す
		return filename;
	}
	else {
		// コピー失敗
		return;
	}
}

//----------------------------------------------------------------
// 配列をソートする
// 引数：　対象の配列（1次元）
// 返値：　並べ替え後の配列　要素は文字列になっている　失敗時は無
//----------------------------------------------------------------
array AsortEx( array ar )
{
	// まず辞書に入れる
	dict d;
	for ( int i=0; i<_aryvn(ar); i++ ) {
		d += $( ar[i], ar[i] );
	}

	// 辞書から取り出す　文字コード順
	array result;
	for ( int i=0; i<_aryvn(ar); i++ ) {
		result += _dickeyget(d)[i];
	}

	return result;
}
