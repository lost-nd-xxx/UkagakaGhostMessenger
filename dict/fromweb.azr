// ウェブから来るイベント

//----------------------------------------------------------------
// 既読を付ける
// 引数：　ゴースト名、送信者識別子
// 返値：　なし
//----------------------------------------------------------------
string OnUkagakaGhostMessenger_MarkAsRead(dict ref)
{
	// 引数を整理
	string r0 = ref["Reference0"];
  string r1 = ref["Reference1"];
  int epoch_sec = GetEpochSec();

	// 発生済みに既読が無ければ付ける
	array read_ids = _dickeyget(SaveData_Received[r0][r1]["msgs"]);
	for ( int i0=0; i0<_aryvn(read_ids); i0++ ) {
		string read_id = read_ids[i0];
		for ( int i1=0; i1<_aryvn(SaveData_Received[r0][r1]["msgs"][read_id]); i1++ ) {
			if ( _gettype(SaveData_Received[r0][r1]["msgs"][read_id][i1]["read_time"])=="nil" ) {
				SaveData_Received[r0][r1]["msgs"][read_id][i1] += $("read_time",epoch_sec);
			}
		}
	}

  // メッセージ達成を確認
	array result;
	array ghosts = _dickeyget(SaveData_Reserved);
	for ( int i0=0; i0<_aryvn(ghosts); i0++ ) {
		string ghost = ghosts[i0];
		array charas = _dickeyget(SaveData_Reserved[ghost]);

		for ( int i1=0; i1<_aryvn(charas); i1++ ) {
			string chara = charas[i1];
			array msg_ids = _dickeyget(SaveData_Reserved[ghost][chara]);

			for ( int i2=0; i2<_aryvn(msg_ids); i2++ ) {
				string msg_id = msg_ids[i2];
	  		array conds = SaveData_Reserved[ghost][chara][msg_id]["Condition"]["Message_Read"];
        int time_count = 0;
				int read_time = 0;
        if ( _aryvn(conds)==3 && conds[0]==r0 && conds[1]==r1 ) {
          array ar = SaveData_Received[ghost][chara]["msgs"][conds[2]];
          time_count = ar[_aryvn(ar)-1]["time_count"];
					read_time = ar[_aryvn(ar)-1]["read_time"];
        }
        if ( read_time>time_count ) {
          result += ${
            $( "sender", ghost ),
            $( "SenderId", chara ),
            $( "MessageId", msg_id )
          };
        }
			}
		}
	}
	// Message_Read以外の条件を満たしているか調べる
	if ( _aryvn(result)>0 ) {
		result = CheckMessageCondition("Message_Read",result);
	}
	// 条件を満たしたメッセージがあるなら待機列に追加
	if ( _aryvn(result)>0 ) {
		AddMessageWaitingList(result);
	}

	SaveVar();
	return;
}

//----------------------------------------------------------------
// web頁から色々する
// 引数：　操作の名前、ゴースト名、送信者識別子
// 返値：　なし
//----------------------------------------------------------------
string OnUkagakaGhostMessenger_SettingsFromWeb(dict ref)
{
  string key = ref["Reference0"];
  string ghost = ref["Reference1"];
  string chara = ref["Reference2"];

	if ( key == "oyasumi_toggle" ) {
		if ( oyasumi_flag == 0 ) {
			oyasumi_flag = 1;
		} else {
			oyasumi_flag = 0;
		}
	} else if ( _gettype(SaveData_Received[ghost][chara])=="nil" ) {
		// 指定された組み合わせがセーブデータにない
		return;
	} else if ( key == "block" ) {
		if ( _gettype(SaveData_Received[ghost][chara]["block_flag"])!="nil" ) {
			if ( SaveData_Received[ghost][chara]["block_flag"]==0 ) {
				SaveData_Received[ghost][chara]["block_flag"] = 1;
			} else {
				SaveData_Received[ghost][chara]["block_flag"] = 0;
			}
		} else {
			SaveData_Received[ghost][chara] += $("block_flag", 1);
		}
	} else if ( key == "mute" ) {
		if ( _gettype(SaveData_Received[ghost][chara]["mute_flag"])!="nil" ) {
			if ( SaveData_Received[ghost][chara]["mute_flag"]==0 ) {
				SaveData_Received[ghost][chara]["mute_flag"] = 1;
			} else {
				SaveData_Received[ghost][chara]["mute_flag"] = 0;
			}
		} else {
			SaveData_Received[ghost][chara] += $("mute_flag", 1);
		}
	} else if ( key == "log_delete" ) {
		if ( _gettype(SaveData_Received[ghost][chara]["msgs"])!="nil" ) {
			SaveData_Received[ghost][chara]["msgs"] = nil;
			// [WIP]画像も消すかどうか考える
			// 予約時にのみ画像をコピーしているので、予約も消さないとログの画像が豆腐になる
		}
	} else if ( key == "address_delete" ) {
		if ( _gettype(SaveData_Received[ghost][chara])!="nil" ) {
			SaveData_Received[ghost][chara] = nil;
			// [WIP]画像も消すかどうか考える
			// 予約時にのみ画像をコピーしているので、予約も消さないとログの画像が豆腐になる
		}
	} else {
		// 指示がおかしかったかもしれない
		return;
	}
	// web用の情報を更新
	UpdateWebJson();
	SaveVar();

	return "\\qsetting done: "+key;
}
